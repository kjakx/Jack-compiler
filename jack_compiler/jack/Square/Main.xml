<class>
<keyword> class </keyword>
<className> Main </className>
<symbol> { </symbol>
<classVarDec>
<keyword> static </keyword>
<keyword> boolean </keyword>
<varName(defined)> static[0] bool test </varName(defined)>
<symbol> ; </symbol>
</classVarDec>
<subroutineDec>
<keyword> function </keyword>
<keyword> void </keyword>
<subroutineName> main </subroutineName>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<className> SquareGame </className>
<varName(defined)> var[0] class game </varName(defined)>
<symbol> ; </symbol>
</varDec>
<statements>
<letStatement>
<keyword> let </keyword>
<varName(used)> var[0] class game </varName(used)>
<symbol> = </symbol>
<expression>
<term>
<className> SquareGame </className>
<symbol> . </symbol>
<subroutineName> new </subroutineName>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<varName(used)> var[0] class game </varName(used)>
<symbol> . </symbol>
<subroutineName> run </subroutineName>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<varName(used)> var[0] class game </varName(used)>
<symbol> . </symbol>
<subroutineName> dispose </subroutineName>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> function </keyword>
<keyword> void </keyword>
<subroutineName> more </subroutineName>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<varName(defined)> var[0] int i </varName(defined)>
<symbol> , </symbol>
<varName(defined)> var[1] int j </varName(defined)>
<symbol> ; </symbol>
</varDec>
<varDec>
<keyword> var </keyword>
<className> String </className>
<varName(defined)> var[2] class s </varName(defined)>
<symbol> ; </symbol>
</varDec>
<varDec>
<keyword> var </keyword>
<className> Array </className>
<varName(defined)> var[3] class a </varName(defined)>
<symbol> ; </symbol>
</varDec>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<keyword> false </keyword>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<varName(used)> var[2] class s </varName(used)>
<symbol> = </symbol>
<expression>
<term>
<stringConstant> string constant </stringConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<varName(used)> var[2] class s </varName(used)>
<symbol> = </symbol>
<expression>
<term>
<keyword> null </keyword>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<varName(used)> var[3] class a </varName(used)>
<symbol> [ </symbol>
<expression>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<varName(used)> var[3] class a </varName(used)>
<symbol> [ </symbol>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ] </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<varName(used)> var[0] int i </varName(used)>
<symbol> = </symbol>
<expression>
<term>
<varName(used)> var[0] int i </varName(used)>
</term>
<symbol> * </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> - </symbol>
<term>
<varName(used)> var[1] int j </varName(used)>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<varName(used)> var[1] int j </varName(used)>
<symbol> = </symbol>
<expression>
<term>
<varName(used)> var[1] int j </varName(used)>
</term>
<symbol> / </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> - </symbol>
<term>
<integerConstant> 2 </integerConstant>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<varName(used)> var[0] int i </varName(used)>
<symbol> = </symbol>
<expression>
<term>
<varName(used)> var[0] int i </varName(used)>
</term>
<symbol> | </symbol>
<term>
<varName(used)> var[1] int j </varName(used)>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<symbol> } </symbol>
</class>
