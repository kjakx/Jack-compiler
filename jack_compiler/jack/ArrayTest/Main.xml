<class>
<keyword> class </keyword>
<className> Main </className>
<symbol> { </symbol>
<subroutineDec>
<keyword> function </keyword>
<keyword> void </keyword>
<subroutineName> main </subroutineName>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<className> Array </className>
<varName(defined)> var[0] class a </varName(defined)>
<symbol> ; </symbol>
</varDec>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<varName(defined)> var[1] int length </varName(defined)>
<symbol> ; </symbol>
</varDec>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<varName(defined)> var[2] int i </varName(defined)>
<symbol> , </symbol>
<varName(defined)> var[3] int sum </varName(defined)>
<symbol> ; </symbol>
</varDec>
<statements>
<letStatement>
<keyword> let </keyword>
<varName(used)> var[1] int length </varName(used)>
<symbol> = </symbol>
<expression>
<term>
<className> Keyboard </className>
<symbol> . </symbol>
<subroutineName> readInt </subroutineName>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<stringConstant> HOW MANY NUMBERS?  </stringConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<varName(used)> var[0] class a </varName(used)>
<symbol> = </symbol>
<expression>
<term>
<className> Array </className>
<symbol> . </symbol>
<subroutineName> new </subroutineName>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<varName(used)> var[1] int length </varName(used)>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<varName(used)> var[2] int i </varName(used)>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<varName(used)> var[2] int i </varName(used)>
</term>
<symbol> &lt; </symbol>
<term>
<varName(used)> var[1] int length </varName(used)>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<varName(used)> var[0] class a </varName(used)>
<symbol> [ </symbol>
<expression>
<term>
<varName(used)> var[2] int i </varName(used)>
</term>
</expression>
<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
<term>
<className> Keyboard </className>
<symbol> . </symbol>
<subroutineName> readInt </subroutineName>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<stringConstant> ENTER THE NEXT NUMBER:  </stringConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<varName(used)> var[2] int i </varName(used)>
<symbol> = </symbol>
<expression>
<term>
<varName(used)> var[2] int i </varName(used)>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<letStatement>
<keyword> let </keyword>
<varName(used)> var[2] int i </varName(used)>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<varName(used)> var[3] int sum </varName(used)>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<varName(used)> var[2] int i </varName(used)>
</term>
<symbol> &lt; </symbol>
<term>
<varName(used)> var[1] int length </varName(used)>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<varName(used)> var[3] int sum </varName(used)>
<symbol> = </symbol>
<expression>
<term>
<varName(used)> var[3] int sum </varName(used)>
</term>
<symbol> + </symbol>
<term>
<varName(used)> var[0] class a </varName(used)>
<symbol> [ </symbol>
<expression>
<term>
<varName(used)> var[2] int i </varName(used)>
</term>
</expression>
<symbol> ] </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<varName(used)> var[2] int i </varName(used)>
<symbol> = </symbol>
<expression>
<term>
<varName(used)> var[2] int i </varName(used)>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<doStatement>
<keyword> do </keyword>
<className> Output </className>
<symbol> . </symbol>
<subroutineName> printString </subroutineName>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<stringConstant> THE AVERAGE IS:  </stringConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<className> Output </className>
<symbol> . </symbol>
<subroutineName> printInt </subroutineName>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<varName(used)> var[3] int sum </varName(used)>
</term>
<symbol> / </symbol>
<term>
<varName(used)> var[1] int length </varName(used)>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<className> Output </className>
<symbol> . </symbol>
<subroutineName> println </subroutineName>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<symbol> } </symbol>
</class>
