<class>
<keyword> class </keyword>
<className> Square </className>
<symbol> { </symbol>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<varName(defined)> field[0] int x </varName(defined)>
<symbol> , </symbol>
<varName(defined)> field[1] int y </varName(defined)>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<varName(defined)> field[2] int size </varName(defined)>
<symbol> ; </symbol>
</classVarDec>
<subroutineDec>
<keyword> constructor </keyword>
<className> Square </className>
<subroutineName> new </subroutineName>
<symbol> ( </symbol>
<parameterList>
<keyword> int </keyword>
<varName(defined)> arg[0] int Ax </varName(defined)>
<symbol> , </symbol>
<keyword> int </keyword>
<varName(defined)> arg[1] int Ay </varName(defined)>
<symbol> , </symbol>
<keyword> int </keyword>
<varName(defined)> arg[2] int Asize </varName(defined)>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<varName(used)> field[0] int x </varName(used)>
<symbol> = </symbol>
<expression>
<term>
<varName(used)> arg[0] int Ax </varName(used)>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<varName(used)> field[1] int y </varName(used)>
<symbol> = </symbol>
<expression>
<term>
<varName(used)> arg[1] int Ay </varName(used)>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<varName(used)> field[2] int size </varName(used)>
<symbol> = </symbol>
<expression>
<term>
<varName(used)> arg[2] int Asize </varName(used)>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<subroutineName> draw </subroutineName>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<varName(used)> field[0] int x </varName(used)>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<subroutineName> dispose </subroutineName>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<className> Memory </className>
<symbol> . </symbol>
<subroutineName> deAlloc </subroutineName>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> this </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<subroutineName> draw </subroutineName>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<className> Screen </className>
<symbol> . </symbol>
<subroutineName> setColor </subroutineName>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<varName(used)> field[0] int x </varName(used)>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<className> Screen </className>
<symbol> . </symbol>
<subroutineName> drawRectangle </subroutineName>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<varName(used)> field[0] int x </varName(used)>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<varName(used)> field[1] int y </varName(used)>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<varName(used)> field[0] int x </varName(used)>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<varName(used)> field[1] int y </varName(used)>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<subroutineName> erase </subroutineName>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<className> Screen </className>
<symbol> . </symbol>
<subroutineName> setColor </subroutineName>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<varName(used)> field[0] int x </varName(used)>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<className> Screen </className>
<symbol> . </symbol>
<subroutineName> drawRectangle </subroutineName>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<varName(used)> field[0] int x </varName(used)>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<varName(used)> field[1] int y </varName(used)>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<varName(used)> field[0] int x </varName(used)>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<varName(used)> field[1] int y </varName(used)>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<subroutineName> incSize </subroutineName>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<varName(used)> field[0] int x </varName(used)>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<subroutineName> erase </subroutineName>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<varName(used)> field[2] int size </varName(used)>
<symbol> = </symbol>
<expression>
<term>
<varName(used)> field[2] int size </varName(used)>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<subroutineName> draw </subroutineName>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<subroutineName> decSize </subroutineName>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<varName(used)> field[2] int size </varName(used)>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<subroutineName> erase </subroutineName>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<varName(used)> field[2] int size </varName(used)>
<symbol> = </symbol>
<expression>
<term>
<varName(used)> field[2] int size </varName(used)>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<subroutineName> draw </subroutineName>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<subroutineName> moveUp </subroutineName>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<varName(used)> field[1] int y </varName(used)>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<className> Screen </className>
<symbol> . </symbol>
<subroutineName> setColor </subroutineName>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<varName(used)> field[0] int x </varName(used)>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<className> Screen </className>
<symbol> . </symbol>
<subroutineName> drawRectangle </subroutineName>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<varName(used)> field[0] int x </varName(used)>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<varName(used)> field[1] int y </varName(used)>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<varName(used)> field[0] int x </varName(used)>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<varName(used)> field[1] int y </varName(used)>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<varName(used)> field[1] int y </varName(used)>
<symbol> = </symbol>
<expression>
<term>
<varName(used)> field[1] int y </varName(used)>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<className> Screen </className>
<symbol> . </symbol>
<subroutineName> setColor </subroutineName>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<varName(used)> field[0] int x </varName(used)>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<className> Screen </className>
<symbol> . </symbol>
<subroutineName> drawRectangle </subroutineName>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<varName(used)> field[0] int x </varName(used)>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<varName(used)> field[1] int y </varName(used)>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<varName(used)> field[0] int x </varName(used)>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<varName(used)> field[1] int y </varName(used)>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<subroutineName> moveDown </subroutineName>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<varName(used)> field[1] int y </varName(used)>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<className> Screen </className>
<symbol> . </symbol>
<subroutineName> setColor </subroutineName>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<varName(used)> field[0] int x </varName(used)>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<className> Screen </className>
<symbol> . </symbol>
<subroutineName> drawRectangle </subroutineName>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<varName(used)> field[0] int x </varName(used)>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<varName(used)> field[1] int y </varName(used)>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<varName(used)> field[0] int x </varName(used)>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<varName(used)> field[1] int y </varName(used)>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<varName(used)> field[1] int y </varName(used)>
<symbol> = </symbol>
<expression>
<term>
<varName(used)> field[1] int y </varName(used)>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<className> Screen </className>
<symbol> . </symbol>
<subroutineName> setColor </subroutineName>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<varName(used)> field[0] int x </varName(used)>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<className> Screen </className>
<symbol> . </symbol>
<subroutineName> drawRectangle </subroutineName>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<varName(used)> field[0] int x </varName(used)>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<varName(used)> field[1] int y </varName(used)>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<varName(used)> field[0] int x </varName(used)>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<varName(used)> field[1] int y </varName(used)>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<subroutineName> moveLeft </subroutineName>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<varName(used)> field[0] int x </varName(used)>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<className> Screen </className>
<symbol> . </symbol>
<subroutineName> setColor </subroutineName>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<varName(used)> field[0] int x </varName(used)>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<className> Screen </className>
<symbol> . </symbol>
<subroutineName> drawRectangle </subroutineName>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<varName(used)> field[0] int x </varName(used)>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<varName(used)> field[1] int y </varName(used)>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<varName(used)> field[0] int x </varName(used)>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<varName(used)> field[1] int y </varName(used)>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<varName(used)> field[0] int x </varName(used)>
<symbol> = </symbol>
<expression>
<term>
<varName(used)> field[0] int x </varName(used)>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<className> Screen </className>
<symbol> . </symbol>
<subroutineName> setColor </subroutineName>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<varName(used)> field[0] int x </varName(used)>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<className> Screen </className>
<symbol> . </symbol>
<subroutineName> drawRectangle </subroutineName>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<varName(used)> field[0] int x </varName(used)>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<varName(used)> field[1] int y </varName(used)>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<varName(used)> field[0] int x </varName(used)>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<varName(used)> field[1] int y </varName(used)>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<subroutineName> moveRight </subroutineName>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<varName(used)> field[0] int x </varName(used)>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<className> Screen </className>
<symbol> . </symbol>
<subroutineName> setColor </subroutineName>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<varName(used)> field[0] int x </varName(used)>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<className> Screen </className>
<symbol> . </symbol>
<subroutineName> drawRectangle </subroutineName>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<varName(used)> field[0] int x </varName(used)>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<varName(used)> field[1] int y </varName(used)>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<varName(used)> field[0] int x </varName(used)>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<varName(used)> field[1] int y </varName(used)>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<letStatement>
<keyword> let </keyword>
<varName(used)> field[0] int x </varName(used)>
<symbol> = </symbol>
<expression>
<term>
<varName(used)> field[0] int x </varName(used)>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<className> Screen </className>
<symbol> . </symbol>
<subroutineName> setColor </subroutineName>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<varName(used)> field[0] int x </varName(used)>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<className> Screen </className>
<symbol> . </symbol>
<subroutineName> drawRectangle </subroutineName>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<varName(used)> field[0] int x </varName(used)>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<varName(used)> field[1] int y </varName(used)>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<varName(used)> field[0] int x </varName(used)>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<varName(used)> field[1] int y </varName(used)>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<symbol> } </symbol>
</class>
