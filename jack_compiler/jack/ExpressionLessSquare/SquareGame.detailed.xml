<class>
<keyword> class </keyword>
<className> SquareGame </className>
<symbol> { </symbol>
<classVarDec>
<keyword> field </keyword>
<className> Square </className>
<varName(defined)> field[0] class square </varName(defined)>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<varName(defined)> field[1] int direction </varName(defined)>
<symbol> ; </symbol>
</classVarDec>
<subroutineDec>
<keyword> constructor </keyword>
<className> SquareGame </className>
<subroutineName> new </subroutineName>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<varName(used)> field[0] class square </varName(used)>
<symbol> = </symbol>
<expression>
<term>
<varName(used)> field[0] class square </varName(used)>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<varName(used)> field[1] int direction </varName(used)>
<symbol> = </symbol>
<expression>
<term>
<varName(used)> field[1] int direction </varName(used)>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<varName(used)> field[0] class square </varName(used)>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<subroutineName> dispose </subroutineName>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<varName(used)> field[0] class square </varName(used)>
<symbol> . </symbol>
<subroutineName> dispose </subroutineName>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<className> Memory </className>
<symbol> . </symbol>
<subroutineName> deAlloc </subroutineName>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<varName(used)> field[0] class square </varName(used)>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<subroutineName> moveSquare </subroutineName>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<varName(used)> field[1] int direction </varName(used)>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<varName(used)> field[0] class square </varName(used)>
<symbol> . </symbol>
<subroutineName> moveUp </subroutineName>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<varName(used)> field[1] int direction </varName(used)>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<varName(used)> field[0] class square </varName(used)>
<symbol> . </symbol>
<subroutineName> moveDown </subroutineName>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<varName(used)> field[1] int direction </varName(used)>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<varName(used)> field[0] class square </varName(used)>
<symbol> . </symbol>
<subroutineName> moveLeft </subroutineName>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<varName(used)> field[1] int direction </varName(used)>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<varName(used)> field[0] class square </varName(used)>
<symbol> . </symbol>
<subroutineName> moveRight </subroutineName>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<doStatement>
<keyword> do </keyword>
<className> Sys </className>
<symbol> . </symbol>
<subroutineName> wait </subroutineName>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<varName(used)> field[1] int direction </varName(used)>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<subroutineName> run </subroutineName>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<keyword> char </keyword>
<varName(defined)> var[0] char key </varName(defined)>
<symbol> ; </symbol>
</varDec>
<varDec>
<keyword> var </keyword>
<keyword> boolean </keyword>
<varName(defined)> var[1] bool exit </varName(defined)>
<symbol> ; </symbol>
</varDec>
<statements>
<letStatement>
<keyword> let </keyword>
<varName(used)> var[1] bool exit </varName(used)>
<symbol> = </symbol>
<expression>
<term>
<varName(used)> var[0] char key </varName(used)>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<varName(used)> var[1] bool exit </varName(used)>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<varName(used)> var[0] char key </varName(used)>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<varName(used)> var[0] char key </varName(used)>
<symbol> = </symbol>
<expression>
<term>
<varName(used)> var[0] char key </varName(used)>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<subroutineName> moveSquare </subroutineName>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<varName(used)> var[0] char key </varName(used)>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<varName(used)> var[1] bool exit </varName(used)>
<symbol> = </symbol>
<expression>
<term>
<varName(used)> var[1] bool exit </varName(used)>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<varName(used)> var[0] char key </varName(used)>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<varName(used)> field[0] class square </varName(used)>
<symbol> . </symbol>
<subroutineName> decSize </subroutineName>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<varName(used)> var[0] char key </varName(used)>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<varName(used)> field[0] class square </varName(used)>
<symbol> . </symbol>
<subroutineName> incSize </subroutineName>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<varName(used)> var[0] char key </varName(used)>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<varName(used)> field[1] int direction </varName(used)>
<symbol> = </symbol>
<expression>
<term>
<varName(used)> var[1] bool exit </varName(used)>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<varName(used)> var[0] char key </varName(used)>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<varName(used)> field[1] int direction </varName(used)>
<symbol> = </symbol>
<expression>
<term>
<varName(used)> var[0] char key </varName(used)>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<varName(used)> var[0] char key </varName(used)>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<varName(used)> field[1] int direction </varName(used)>
<symbol> = </symbol>
<expression>
<term>
<varName(used)> field[0] class square </varName(used)>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<varName(used)> var[0] char key </varName(used)>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<varName(used)> field[1] int direction </varName(used)>
<symbol> = </symbol>
<expression>
<term>
<varName(used)> field[1] int direction </varName(used)>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<varName(used)> var[0] char key </varName(used)>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<varName(used)> var[0] char key </varName(used)>
<symbol> = </symbol>
<expression>
<term>
<varName(used)> var[0] char key </varName(used)>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<subroutineName> moveSquare </subroutineName>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
</statements>
<symbol> } </symbol>
</whileStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<symbol> } </symbol>
</class>
